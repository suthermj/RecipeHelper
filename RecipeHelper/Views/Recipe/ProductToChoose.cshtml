@model IngredientsVM

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <h1 class="text-3xl font-bold text-gray-900 mb-8 text-center">Add Ingredients to Recipe</h1>

    <div class="max-w-xl mx-auto mb-6">
        <label for="ingredientSearch" class="block text-sm font-medium text-gray-700 mb-1">
            Search ingredients
        </label>
        <div class="flex gap-2">
            <input id="ingredientSearch"
                   type="text"
                   placeholder="Type to filter…"
                   class="w-full rounded-md border border-gray-300 px-4 py-2 focus:ring-indigo-500 focus:border-indigo-500"
                   autocomplete="off" />
            <button type="button" id="clearSearch"
                    class="px-3 py-2 rounded-md border border-gray-300 text-gray-700 hover:bg-gray-50">
                Clear
            </button>
        </div>
        <p id="searchMeta" class="text-xs text-gray-500 mt-2 hidden"></p>
    </div>

    <form id="ingredientsForm" asp-action="SaveIngredients" method="post">
        <input type="hidden" name="RecipeId" value="@Model.RecipeId" />


        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            @for (int i = 0; i < Model.Ingredients.Count; i++)
            {
                @Html.HiddenFor(m => m.Ingredients[i].Id)
                @Html.HiddenFor(m => m.Ingredients[i].Name)

                <div class="ingredient-card bg-white rounded-lg shadow-md p-4 flex flex-col items-center"
                     data-name="@Model.Ingredients[i].Name.ToLowerInvariant()">
                    <img src="https://www.kroger.com/product/images/xlarge/front/@Model.Ingredients[i].Upc"
                         alt="@Model.Ingredients[i].Name"
                         class="rounded-lg object-cover w-full h-40 mb-4" />

                    <h2 class="text-lg font-semibold text-gray-800 text-center">@Model.Ingredients[i].Name</h2>

                    <div class="mt-4 flex items-center justify-center gap-2">
                        <button type="button"
                                class="text-xl text-indigo-600 hover:text-indigo-800"
                                onclick="decrementQuantity(@Model.Ingredients[i].Id)">
                            <i class="fa-solid fa-circle-minus"></i>
                        </button>

                        @Html.TextBoxFor(m => m.Ingredients[i].Quantity, new {
                        id = "quantity-" + Model.Ingredients[i].Id,
                                        @class = "w-16 text-center border border-gray-300 rounded-md py-1"
                                        })

                    <button type="button"
                            class="text-xl text-indigo-600 hover:text-indigo-800"
                            onclick="incrementQuantity(@Model.Ingredients[i].Id)">
                        <i class="fa-solid fa-circle-plus"></i>
                    </button>
                </div>

                <div class="mt-2 w-full flex justify-center">
                    @Html.DropDownListFor(
                                        m => m.Ingredients[i].MeasurementId,
                                        Model.AvailableMeasurements,
                                        "Measurement Unit",
                                        new { @class = "form-control" }
                                        )
                </div>
            </div>
                        }
        </div>

        <div id="noResults" class="hidden text-center text-gray-500 mt-4">
            No ingredients match your search.
        </div>

        <div class="mt-10 flex justify-center">
            <button type="submit"
                    class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-6 rounded shadow focus:outline-none">
                Add Ingredients to Recipe
            </button>
        </div>
    </form>
</div>

<!--- Quantity Functionality --->
<script>
    function incrementQuantity(index) {
        var quantityInput = document.getElementById("quantity-" + index);
        var currentValue = parseInt(quantityInput.value) || 0;
        quantityInput.value = currentValue + 1;
    }

    function decrementQuantity(index) {
        var quantityInput = document.getElementById("quantity-" + index);
        var currentValue = parseInt(quantityInput.value) || 0;
        quantityInput.value = Math.max(0, currentValue - 1);
    }
</script>

<!--- Search Functionality --->

<script>
    (function () {
      const input = document.getElementById('ingredientSearch');
      const clearBtn = document.getElementById('clearSearch');
      const meta = document.getElementById('searchMeta');
      const cards = Array.from(document.querySelectorAll('.ingredient-card'));
      const noResults = document.getElementById('noResults');

      function normalize(s) {
        return (s || '').toLowerCase().replace(/\s+/g, ' ').trim();
      }

      function filter(term) {
        const q = normalize(term);
        let visible = 0;

        cards.forEach(card => {
          const name = card.getAttribute('data-name');
          const match = !q || name.includes(q);
          card.style.display = match ? '' : 'none';
          if (match) visible++;
        });

        noResults.classList.toggle('hidden', visible !== 0);
        meta.textContent = q ? `Showing ${visible} result(s) for “${term}”` : '';
        meta.classList.toggle('hidden', !q);
      }

      let t;
      input.addEventListener('input', () => {
        clearTimeout(t);
        t = setTimeout(() => filter(input.value), 120);
      });

      clearBtn.addEventListener('click', () => {
        input.value = '';
        filter('');
        input.focus();
      });

      // Quick focus: Ctrl/Cmd+K
      window.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'k') {
          e.preventDefault();
          input.focus();
        }
      });
    })();
</script>

<script src="https://kit.fontawesome.com/253b9e5551.js" crossorigin="anonymous"></script>
